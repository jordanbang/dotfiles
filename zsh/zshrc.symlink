# Ensure correct language is used
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Advertise 256-color support
if [[ $TERM =~ '^screen' ]]; then
    export TERM="screen-256color"
else
    export TERM="xterm-256color"
fi

export EDITOR=vim

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles
export PATH=~/bin:$PATH

# all of our zsh files
typeset -U config_files
setopt extendedglob
config_files=($ZSH/^zsh/*.zsh)

# OPAM configuration
[ -x /usr/bin/opam ] && . $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${${config_files:#*/path.zsh}:#*/completion.zsh}:#*/install.zsh}
do
  source $file
done

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

DISABLE_UPDATE_PROMPT="true"
COMPLETION_WAITING_DOTS="true"
PROJECT_PATHS=(~/apps)
source "$HOME/.dotfiles/zsh/zgen/zgen.zsh"

# Allow a host-identifying symbol in localrc
: ${HOST_SYMBOL:="%{$fg[cyan]%}Î»%{$reset_color%}"}
export PROMPT="$HOST_SYMBOL${HOST_SYMBOL:+ }$PROMPT"

compdef mosh=ssh
compdef _pids reptyr

# XXX This needs to come after RVM
alias e="exec_scmb_expand_args $EDITOR"
[ -s "$HOME/.scm_breeze/scm_breeze.sh" ] && source "$HOME/.scm_breeze/scm_breeze.sh"

alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
function wd { dpkg -S $(readlink -f `which -a $1 | grep -E '^/' | head -1`) }
unalias ag
compdef _ag ag
unalias d

setopt histignorespace

export LESS=FSRX

# Allow Ctrl-z to toggle between suspend and resume
function Resume {
  zle push-input
  BUFFER=" fg"
  zle accept-line
}
zle -N Resume
bindkey "^Z" Resume

# Only kill to the beginning of the line
bindkey "^U" backward-kill-line

# Add local manpath
export MANPATH=~/.man:$MANPATH

# Add fzf
export FZF_DEFAULT_COMMAND='ag -l -g ""'
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
zle     -N   fzf-file-widget
bindkey '^P' fzf-file-widget

# settings from: https://github.com/jruby/jruby/wiki/Improving-startup-time
export JRUBY_OPTS="-J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify"

# vim-superman
vman() {
    vim -c "SuperMan $*"

    if [ "$?" != "0" ]; then
        echo "No manual entry for $*"
    fi
}
compdef vman="man"

# Add command to quickly start or reattach to a tmux session by name
tm() {
    if [ -z $1 ]; then
        tmux list-sessions
        return
    fi
    tmux detach -s $1 2> /dev/null
    tmux attach-session -t $1 2> /dev/null || tmux new-session -s $1
}

_tm() {
  local word completions
  word="$1"
  completions=`tmux list-sessions | cut -d ':' -f1`
  reply=( "${(ps:\n:)completions}" )
}
compctl -K _tm tm

# cd into the directory of a Python package
pcd() {
  dir=`python -c "import os; print(os.path.dirname(__import__('$1').__file__))"`
  [ $? -eq 0 ] && cd "$dir"
}

_pcd() {
    local word completions
    word="$1"
    completions=`python -c "import pkgutil; print('\n'.join([x[1] for x in pkgutil.iter_modules() if x[1].startswith('$1')]))"`
    reply=( "${(ps:\n:)completions}" )
}
compctl -K _pcd pcd

# Set window title under tmux
precmd() {
    if [ -z "$TMUX" ]; then return; fi
    echo -ne "\033]0;[$(tmux display-message -p "#S")] $(print -P "%~")\007"
}

# use .localrc for secret stuff
# want in your public, versioned repo.
if [[ -a ~/.localrc ]]
then
    source ~/.localrc
fi
